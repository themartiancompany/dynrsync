#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_host=""
  target_device=""
  target_user=""
  target_address=""
  target_port=""
  tunnel_local=""
  tunnel_remote=""
  proxy_address=""
  proxy_port=""
  connection_retries=""
  rsync_options=()
  connect_date=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "dynssh"
  _check_cmd \
    "rsync"
}

_transfer() {
  local \
    _retries="${1}" \
    _cmd=() \
    _i=1
  _cmd=(
    dynssh \
      "${_dynssh_opts[@]}" --
      "${_rsync_opts[@]}"
  )
  until \
    "${_cmd[@]}" || \
    (( "${_retries}" < "${_i}" )); do
    _msg_warning \
      "transfer failed, retrying (${_i} of ${_retries})"
    _i="$((_i + 1))"
  done
}

_dynssh_opts_set() {
  _dynssh_opts+=(
    -t
      "${_host}"
    -d
      "${_device}"
    -C
      "rsync"
  )
  if [[ "${_address}" != "" ]]; then
    _dynssh_opts+=(
      -a
        "${_address}"
    )
  fi
  if [[ "${_user}" != "" ]]; then
    _dynssh_opts+=(
      -u
        "${_user}"
    )
  fi
  if [[ "${_device}" != "" ]]; then
    _dynssh_opts+=(
      -d
        "${_device}"
    )
  fi
  if [[ "${_port}" != "" ]]; then
    _dynssh_opts+=(
      -p
        "${_port}"
    )
  fi
  if [[ "${_tunnel_local}" != "" ]]; then
    _dynssh_opts+=(
      -l
        "${_tunnel_local}"
    )
  fi
  if [[ "${_tunnel_remote}" != "" ]]; then
    _dynssh_opts+=(
      -r
        "${_tunnel_remote}"
    )
  fi
  if [[ "${_proxy_address}" != "" ]]; then
    _dynssh_opts+=(
      -T
        "${_proxy_address}"
    )
  fi
  if [[ "${_proxy_port}" != "" ]]; then
    _dynssh_opts+=(
      -P
        "${_proxy_port}"
    )
  fi

}

# Rsync wrapper using dynssh as ssh command
# $1: hostname of the device to connect
# $2: network device name
# ...
# See dynssh documentation
_dynrsync() {
  local \
    _host="${1}" \
    _address="${2}" \
    _device="${3}" \
    _user="${4}" \
    _port="${5}" \
    _tunnel_local="${6}" \
    _tunnel_remote="${7}" \
    _proxy_address="${8}" \
    _proxy_port="${9}" \
    _retries="${10}" \
    _rsync_opts=() \
    _dynssh_opts=()
  shift \
    10
  _rsync_opts=(
    "$@"
  )
  _dynssh_opts_set
  _msg_info \
    "using dynssh opts '${_dynssh_opts[*]}'"
  _msg_info \
    "using rsync opts '${_rsync_opts[*]}'"
  _transfer \
    "${_retries}"
  # rsync \
  #   -e \
  #     "${_ssh_command} ${_ssh_opts[*]}" \
  #   "${_args[@]}"
}

_set_overrides() {
  _set_override \
    "connect" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "host" \
    ""
  _set_override \
    "target" \
    "device" \
    "wlan0"
  _set_override \
    "target" \
    "user" \
    "dev"
  _set_override \
    "target" \
    "port" \
    "2222"
  _set_override \
    "tunnel" \
    "local" \
    ""
  _set_override \
    "tunnel" \
    "remote" \
    ""
  _set_override \
    "connection" \
    "retries" \
    "3"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
usage:
  $(_get "app" "name")
    -t
      <target_host>
    [options]
    [rsync options]
  options:
     -t <target_host>     Specify target host
     -a <address>         Specify target address
                          Default: '$(_get "target" "address")'
     -d <device>          Specify network device
                          Default: '$(_get "target" "device")'
     -u <user>            user to connect to.
                          Default: '$(_get "target" "user")'
     -p <port>            Connect through a specific port.
                          Default: '$(_get "target" "port")'
     -l <local_port>      Tunnel on given local port
                          Default: '$(_get "tunnel" "local")'
     -r <remote_port>     Tunnel on given remote port
                          Default: '$(_get "tunnel" "remote")'
     -T <proxy_address>   Specify a proxy address
     -P <proxy_port>      Specify a proxy port
     -n <retries>         Number of retries in case of connection failure
                          Default: '$(_get "connection" "retries")'

     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "          Connection date:   $(_get "connect" "date")"
  _msg_info "                     Host:   $(_get "target" "host")"
  _msg_info "                   Device:   $(_get "target" "device")"
  _msg_info "                     User:   $(_get "target" "user")"
  _msg_info "                  Address:   $(_get "target" "address")"
  _msg_info "                     Port:   $(_get "target" "port")"
  _msg_info "        Tunnel local port:   $(_get "tunnel" "local")"
  _msg_info "       Tunnel remote port:   $(_get "tunnel" "remote")"
  _msg_info "            Proxy address:   $(_get "proxy" "address")"
  _msg_info "               Proxy port:   $(_get "proxy" "port")"
  _msg_info "       Connection retries:   $(_get "connection" "retries")"
  if [[ "$(_get \
          "rsync" \
          "options")" != "" ]]; then
    _msg_info "                  RSync options:   ${rsync_options[*]}"
  fi
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    't:a:d:u:p:l:r:T:P:C:n:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    a) override_target_address="${OPTARG}" ;;
    d) override_target_device="${OPTARG}" ;;
    u) override_target_user="${OPTARG}" ;;
    p) override_target_port="${OPTARG}" ;;
    l) override_tunnel_local="${OPTARG}" ;;
    r) override_tunnel_remote="${OPTARG}" ;;
    T) override_proxy_address="${OPTARG}" ;;
    P) override_proxy_port="${OPTARG}" ;;
    n) override_connection_retries="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
rsync_options=(
  "$@"
)
_set_overrides
_config_user_init \
  "$(_get \
       "app" \
       "name")"
[[ "$(_get \
        "target" \
        "host")" == "" ]] && \
  _msg_error \
   "-t option is required" \
   0 && \
  _usage \
   1
_show_config
app_opts=(
 "$( \
   _get \
      "target" \
      "host")"
  "$( \
    _get \
      "target" \
      "address")"
  "$( \
    _get \
      "target" \
      "device")"
  "$( \
    _get \
      "target" \
      "user")"
  "$( \
    _get \
      "target" \
      "port")"
  "$( \
    _get \
      "tunnel" \
      "local")"
  "$( \
    _get \
      "tunnel" \
      "remote")"
  "$( \
    _get \
      "proxy" \
      "address")"
  "$( \
    _get \
      "proxy" \
      "port")"
  "$( \
    _get \
      "connection" \
      "retries")"
  "${rsync_options[@]}"
)
_dynrsync \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
